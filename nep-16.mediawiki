<pre>
  NEP: 16
  Title: NEO Executable Format (NEF)
  Author: Fernando Díaz Toledano <shargon@gmail.com>, Erik Zhang <erik@neo.org>, Igor Machado Coelho <igormachado@gmail.com>, Li Jianying <lightsever@hotmail.com>, Vitor Nazário Coelho <vncoelho@gmail.com>
  Type: Standard
  Status: Accepted
  Created: 2020-03-31
</pre>

==Abstract==

A NEF is a file meeting the standard format for a valid NEO executable file. It provides the basic information about the script, including the compiler, version, along with the checksum for data verification.

This NEP describes the NEF standard for NEO smart contracts.

==Motivation==

Although we use neo-vm as the virtual machine currently, we should have other scripts in the future. A standard definition for the executable file format can guarantee both the feasibility of other vm code and the validity of the script file.

==Specification==

In the field definitions below, we provide both the definitions of the fields as well as the corresponding functions.

==Fields==

A nef file can be divided into three parts, that is, the file header (Magic, Compiler, Version, ScriptHash), Checksum and Script.

===Magic===

Magic header of the file. It has a constant value of `0x3346454E` in `4` bytes, standing for the NEO Executable Format 3 or NEF3 for short.

===Compiler===

A UTF-8 encoded `string` representing the human readable name of the compiler used to create the data in the `script` field. Its length is limited to 32 bytes. The name is right side padded by zero's if shorter than 32 bytes.

===Version===

Identifies the version of the compiler. It consists of four attributes, namely Major, Minor, Build, Revision, with the total size of `16` bytes. Each attribute is a signed 32 bit integer. 

===ScriptHash===

The hash of the script with a length of `20` bytes. It is calculated by performing a SHA256 over the `script` data followed by creating a RIPEMD160 hash over the previous output  to check the script consistency.

===Checksum===

The checksum field is used to verify the integrity and accuracy of the file. The checksum is created by hashing the `header` using the SHA256 algorithm and taking the first 4 bytes of the hash result.

===Script===

Stores the raw VM opcodes. The data should be serialised using the variable length format as described in the [https://docs.neo.org/developerguide/en/articles/conventions.html#variable-length-types documentation].
